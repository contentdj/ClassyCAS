h1. Classy CAS

Classy CAS is a Single sign-on server based on the "CAS protocol":http://www.jasig.org/cas/protocol and implemented in Sinatra.

* Is a Single sign-on server
* Is CAS protocol compliant
* Is implemented with Sinatra
* Uses Redis
* Pairs great with OmniAuth CAS client
* Supports any CAS compliant client from any language, framework, or platform (PHP, .NET, Java)


On the client side, ClassyCAS pairs up nicely with OmniAuth and it's CAS client implementation.  However clients are not only limited to either RubyonRails or Sinatra apps, because the server is built on the CAS protocol any client in any language or framework which adheres to the protocol is supported, thus ClassyCAS is also well to suited to environments where Single sign-on is desired but where the ecosystem of applications is heterogeneous in terms of platforms.


h2. Quick Start Demo

# Download and install Redis:"http://code.google.com/p/redis/"
<pre>
<code>
 curl -O http://redis.googlecode.com/files/redis-2.0.4.tar.gz
 tar xvzf redis-2.0.4.tar.gz
 cd redis-2.0.4
 make
 sudo cp redis-server redis-cli redis-benchmark /usr/local/bin
</code>
</pre>
# git clone https://github.com/timcase/cas_client_example
# From the client apps directory "bundle install"
# Start the client app 
# Make a copy of the client app to act as your second sign on client.
# Open a new terminal tab and start Redis, "redis-server"  


h2. What's There

* "Sinatra":http://www.sinatrarb.com/ based.  Classy.
* Uses "Redis":http://code.google.com/p/redis/ to store tickets.  Fast!
* Lots of tests.  The whole protocol isn't there yet, but "this test":http://github.com/AndrewO/ClassyCAS/blob/master/test/protocol/cas_server_test.rb is a good start on an executable spec for CAS 1.0/2.0.

h2. What's Missing

* Proxy authentication.
* Logout support.
* Plugable authentication stores.  I'm thinking of "Warden":http://github.com/hassox/warden or "Devise":http://blog.plataformatecby.com.br/tag/devise/
* Lots of code cleanup.  The tests and the application all need a hearty helping of TLC before they're production ready.

h2. Resources

* "CAS":http://www.jasig.org/cas
* "RubyCAS Server":http://github.com/gunark/rubycas-server, an existing CAS implementation written on top of Camping.  At times when the spec has been unclear, I've tried to stick to what RubyCAS does.