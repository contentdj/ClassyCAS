h1. Classy CAS

* Single sign-on server
* CAS protocol compliant
* Implemented with Sinatra
* Uses Redis
* Pairs great with OmniAuth CAS client

Classy CAS is a Single sign-on server based on the "CAS protocol":http://www.jasig.org/cas/protocol and implemented in Sinatra.  ClassyCAS provides the server services of Single sign-on by acting as the central point authentication where users attempting access multiple sites are sent to be authenticated.  If you've ever signed in to a Google service and then accessed your Gmail and then moved over to Google reader then you've experienced exactly what Single sign-on means.

On the client side, ClassyCAS pairs up nicely with OmniAuth and it's CAS client implementation.  However clients are not only limited to either RubyonRails or Sinatra apps, because the server is built on the CAS protocol any client in any language or framework which adheres to the protocol is supported, thus ClassyCAS is also well to suited to environments where Single sign-on is desired but where the ecosystem of applications is heterogeneous in terms of platforms.


h2. What's There

* "Sinatra":http://www.sinatrarb.com/ based.  Classy.
* Uses "Redis":http://code.google.com/p/redis/ to store tickets.  Fast!
* Lots of tests.  The whole protocol isn't there yet, but "this test":http://github.com/AndrewO/ClassyCAS/blob/master/test/protocol/cas_server_test.rb is a good start on an executable spec for CAS 1.0/2.0.

h2. What's Missing

* Proxy authentication.
* Logout support.
* Plugable authentication stores.  I'm thinking of "Warden":http://github.com/hassox/warden or "Devise":http://blog.plataformatecby.com.br/tag/devise/
* Lots of code cleanup.  The tests and the application all need a hearty helping of TLC before they're production ready.

h2. Resources

* "CAS":http://www.jasig.org/cas
* "RubyCAS Server":http://github.com/gunark/rubycas-server, an existing CAS implementation written on top of Camping.  At times when the spec has been unclear, I've tried to stick to what RubyCAS does.